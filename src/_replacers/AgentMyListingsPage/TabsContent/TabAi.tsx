import { tMatch, transformMatchingElements } from '@/_helpers/dom-manipulators';
import Input from '@/_replacers/FilterFields/Input';
import SearchAddressCombobox from '@/_replacers/FilterFields/SearchAddressCombobox';
import { TabContentProps } from '@/_typings/agent-my-listings';
import { getAutoGeneratedPropertyInfo } from '@/_utilities/api-calls/call-prompt';
import { searchByPartOfClass } from '@/_utilities/rx-element-extractor';
import RxDragNDrop from '@/components/RxDragNDrop';
import RxDropzone from '@/components/RxDropzone';
import useDebounce from '@/hooks/useDebounce';
import React, { cloneElement, useState, useEffect, createElement } from 'react';
interface ImagePreview extends File {
  preview: string;
}
export default function TabAi({ template, nextStepClick }: TabContentProps) {
  const [files, setFiles] = useState<ImagePreview[]>([]);
  const [prompt, setPropmt] = useState<string>();
  const [generatedPrompt, setGeneratedPrompt] = useState<any>();
  const [generatedAddress, setGeneratedAddress] = useState<any>();
  const debouncedPropmt = useDebounce(prompt ?? '', 600);

  useEffect(() => {
    if (debouncedPropmt.length > 5) {
      // getAutoGeneratedPropertyInfo(debounced).then(res => {setGeneratedPrompt(res)});
    }
    return () => {};
  }, [debouncedPropmt]);

  const reorderFiles = (newOrder: ImagePreview[]) => {
    setFiles([...newOrder]);
  };
  const deleteFile = (id: number) => {
    setFiles((prev: ImagePreview[]) => [...prev.filter(preview => preview.lastModified !== id)]);
  };
  const blockNext = () => ![generatedAddress, generatedPrompt].every(Boolean);

  const matches: tMatch[] = [
    {
      searchFn: searchByPartOfClass(['ai-prompt-input']),
      transformChild: child => (
        <Input
          template={child}
          value={prompt}
          inputProps={{
            placeholder: child.props.placeholder,
          }}
          onChange={e => {
            setPropmt(e.currentTarget.value);
          }}
        />
      ),
    },
    {
      searchFn: searchByPartOfClass(['address-input']),
      transformChild: child => (
        <SearchAddressCombobox
          className={child.props.className}
          placeholder={child.props.placeholder}
          name='address'
          id='address-input'
          onPlaceSelected={place => {
            setGeneratedAddress(place);
          }}
        />
      ),
    },
    {
      searchFn: searchByPartOfClass(['card-upload-wrapper']),
      transformChild: child => (
        <RxDropzone
          className={'card-upload-wrapper'}
          onFileUpload={(newFiles: ImagePreview[]) => {
            setFiles([...files, ...newFiles]);
          }}
          inputId='agent_image'
        >
          {child.props.children}
        </RxDropzone>
      ),
    },
    {
      searchFn: searchByPartOfClass(['image-bank']),
      transformChild: child => (files?.length > 0 ? <RxDragNDrop files={files} template={child} reorderFiles={reorderFiles} deleteFile={deleteFile} /> : <></>),
    },
    {
      searchFn: searchByPartOfClass(['f-button-neutral']),
      transformChild: child =>
        createElement(
          'button',
          { className: `${child.props.className} ${'disabled:bg-gray-500 disabled:cursor-not-allowed'}`, disabled: blockNext(), onClick: nextStepClick },
          [child.props.children],
        ),
    },
  ];
  return <>{transformMatchingElements(template, matches)}</>;
}
