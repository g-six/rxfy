import React, { useEffect, createElement } from 'react';

import { tMatch, transformMatchingElements } from '@/_helpers/dom-manipulators';
import { TabContentProps } from '@/_typings/agent-my-listings';
import { getAutoGeneratedPropertyInfo } from '@/_utilities/api-calls/call-prompt';
import { searchByPartOfClass } from '@/_utilities/rx-element-extractor';
import useFormEvent, { Events, PrivateListingData, ImagePreview } from '@/hooks/useFormEvent';

import Input from '@/_replacers/FilterFields/Input';
import SearchAddressCombobox from '@/_replacers/FilterFields/SearchAddressCombobox';
import RxDragNDrop from '@/components/RxDragNDrop';
import RxDropzone from '@/components/RxDropzone';
import useDebounce from '@/hooks/useDebounce';
import { createPrivateListing, updatePrivateListing, uploadListingPhoto } from '@/_utilities/api-calls/call-private-listings';
import { PrivateListingInput, PrivateListingOutput } from '@/_typings/private-listing';
import axios from 'axios';
import { formatAddress } from '@/_utilities/string-helper';

export default function TabAi({ template, nextStepClick, saveAndExit, initialState }: TabContentProps) {
  const { data, fireEvent } = useFormEvent<PrivateListingData>(Events.PrivateListingForm, initialState);
  const debouncedPrompt = useDebounce(data?.prompt ?? '', 900);

  // Upload photos one data has been created - this is just a quick and dirty solution
  // Rosty / Sasha please refactor this as you see fit.
  if (data?.id && data?.upload_queue && data?.photos && data.photos.filter(({ url }) => url).length === data?.upload_queue.total) {
    // Photo upload completed, update listing
    let photos: string[] = [];
    data.photos.forEach(({ url }) => {
      if (url) photos.push(url);
    });
    // updatePrivateListing(data.id, {
    //   photos,
    // });
  }

  const checkPrompt = React.useCallback(
    (str: string) => {
      getAutoGeneratedPropertyInfo(str).then(res => fireEvent(res));
    },
    [fireEvent],
  );

  useEffect(() => {
    if (debouncedPrompt.length > 5) {
      checkPrompt(debouncedPrompt);
    }
    return () => {};
  }, [debouncedPrompt, checkPrompt]);

  const blockNext = () => ![data?.title, data?.beds].every(Boolean);
  const reorderFiles = (newOrder: ImagePreview[]) => fireEvent({ photos: [...newOrder] });
  const deleteFile = (id: number) => {
    const photos = data?.photos ? data.photos.filter(preview => preview.lastModified !== id) : [];
    fireEvent({ photos: photos });
  };

  const matches: tMatch[] = [
    {
      searchFn: searchByPartOfClass(['ai-prompt-input']),
      transformChild: child => (
        <Input
          template={child}
          value={data?.prompt ? data.prompt : ''}
          inputProps={{ placeholder: child.props.placeholder }}
          onChange={e => fireEvent({ prompt: e.currentTarget.value })}
        />
      ),
    },
    {
      searchFn: searchByPartOfClass(['address-input']),
      transformChild: child => (
        <SearchAddressCombobox
          defaultValue={data?.title}
          className={child.props.className}
          placeholder={child.props.placeholder}
          name='address'
          id='address-input'
          onPlaceSelected={place => fireEvent({ ...place, generatedAddress: place, title: place.address })}
          search={data?.generatedAddress?.address}
        />
      ),
    },
    {
      searchFn: searchByPartOfClass(['card-upload-wrapper']),
      transformChild: child => (
        <RxDropzone
          className={'card-upload-wrapper'}
          onFileUpload={(newFiles: ImagePreview[]) => {
            const photos = data?.photos ? data.photos : [];
            fireEvent({ photos: [...photos, ...newFiles] });
          }}
          inputId='agent_image'
        >
          {child.props.children}
        </RxDropzone>
      ),
    },
    {
      searchFn: searchByPartOfClass(['image-bank']),
      transformChild: child => {
        const photos = data?.photos ? data.photos : [];
        return photos?.length > 0 ? <RxDragNDrop files={photos} template={child} reorderFiles={reorderFiles} deleteFile={deleteFile} /> : <></>;
      },
    },
    {
      searchFn: searchByPartOfClass(['f-button-neutral']),
      transformChild: child =>
        createElement(
          'button',
          { className: `${child.props.className} ${'disabled:bg-gray-500 disabled:cursor-not-allowed'}`, disabled: blockNext(), onClick: nextStepClick },
          [child.props.children],
        ),
    },
    {
      searchFn: searchByPartOfClass(['f-button-secondary']),
      transformChild: child =>
        createElement(
          'button',
          {
            className: `${child.props.className} ${'disabled:bg-gray-500 disabled:cursor-not-allowed'}`,
            disabled: blockNext(),
            onClick: () => saveAndExit(data),
          },
          [child.props.children],
        ),
    },
  ];
  return <>{transformMatchingElements(template, matches)}</>;
}
